## HTTP 请求方法

HTTP 定义了一组**请求方法**, 以表明要对给定资源执行的操作。指示针对给定资源要执行的期望动作. 虽然他们也可以是名词, 但这些请求方法有时被称为HTTP动词. 每一个请求方法都实现了不同的语义, 但一些共同的特征由一组共享，例如一个请求方法可以是 [safe](https://developer.mozilla.org/en-US/docs/Glossary/Safe), [idempotent](https://developer.mozilla.org/en-US/docs/Glossary/Idempotent), 或 [cacheable](https://developer.mozilla.org/en-US/docs/Glossary/cacheable).

- `GET`

  GET方法请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据.

- `HEAD`

  HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.

- `POST`

  POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用. 

- `PUT`

  PUT方法用请求有效载荷替换目标资源的所有当前表示。

- `DELETE`

  DELETE方法删除指定的资源。

- `CONNECT`

  CONNECT方法建立一个到由目标资源标识的服务器的隧道。

- `OPTIONS`

  OPTIONS方法用于描述目标资源的通信选项。

- `TRACE`

  TRACE方法沿着到目标资源的路径执行一个消息环回测试。

- `PATCH`

  PATCH方法用于对资源应用部分修改。

## 1、GET、POST、PUT与DELETE的区别

1、GET请求会向数据库发索取数据的请求，从而来获取信息，该请求就像数据库的select操作一样，只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容，即该请求不会产生副作用。无论进行多少次操作，结果都是一样的。

2、与GET不同的是，**PUT请求是向服务器端发送数据的，从而改变信息**，该请求就像数据库的update操作一样，用来修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。

3、**POST请求同PUT请求类似，都是向服务器端发送数据的**，但是该请求会改变数据的种类等资源，就像数据库的insert操作一样，会创建新的内容。几乎目前所有的提交操作都是用POST请求的。

4、DELETE请求顾名思义，就是用来删除某一个资源的，该请求就像数据库的delete操作。

就像前面所讲的一样，既然PUT和POST操作都是向服务器端发送数据的，那么两者有什么区别呢。。。POST主要作用在一个集合资源之上的（url），而PUT主要作用在一个具体资源之上的（url/xxx），通俗一下讲就是，**如URL可以在客户端确定，那么可使用PUT，否则用POST。**

> 综上所述，我们可理解为以下：
>
> 1、POST /url 创建 
> 2、DELETE /url/xxx 删除 
> 3、PUT /url/xxx 更新
> 4、GET /url/xxx 查看

## 2、post和put的区别-额外解释

POST方法和PUT方法请求最根本的区别是发起请求的目的不同。post 请求的目的是根据资源自身的语义来处理这个资源（译注：我理解这个意思就是说，post请求可以根据实际请求的资源来决定到底怎么处理，原文中4.3.3节给了一些例子。我会把我的翻译版附在本文末尾。）。put请求的目的是用来替换整个目标资源。put 请求具有 **幂等性（idempotent）**。（幂等性的意思在这个RFC的4.2.2里说了“同样的请求，不管发多少次，每次服务器处理完之后的结果，都和只发一次是一样的。”这里我举个例子帮助大家理解：你的服务器端存放了一个文章收藏夹，你通过一个put请求来修改收藏夹里的文章名字，这个 put 请求的请求体里包含了整个文章收藏夹里所有文章的名字。当服务端处理这个请求时，只要从 put 请求里拿出这个文章名字列表，整个存到服务器上，就是一个完整的新的收藏夹。那么这样的put 请求，无论你是发一次，还是发多次，假设服务器都能成功处理，那么最终对服务器造成的影响都是一样的：即服务器端原有的收藏夹里的文章列表被替换成了put请求里带的收藏夹的文章列表。）

## 3、post的使用场景

服务端在处理时post方法发出的请求时，应该按照请求的具体资源的具体语义来对该资源做相应的处理。例如，以下情况一般使用 Post 方法：

- 提供一整块数据时，比如，向html表单的文本框里输入数据，然后把整个表单提交，来对这些数据做处理。
- 在论坛、群组、邮件列表、博客或者类似的东西里发表文章时。
- 想要通过请求在服务器端创建一个新资源时。
- 像服务端的一个资源里插入一些数据时。

## 4、put的使用场景

put方法用于创建或者替换整个资源，请求体（body）里包含这个资源的完整描述。一个 put 请求如果成功了，那么理论上来说，对同样的 url 做一个 get 请求，应该能得到一个 200 (OK) 的响应。但实际上，并不能保证get 到200的响应。因为，可能同时有其他人也在对这个资源做操作，那么就可能在get请求抵达服务器之前，这个资源已经被别人改掉了。所以说， put 请求成功，只能代表在这个请求被服务器处理的那个时刻上，这个资源被创建或替换成请求体里的样子了。（译注：比如我用put请求修改一个小组里的所有用户列表，我的请求体里包含了小组里所有用户的用户名列表，那么在服务器处理我这个请求，并告诉我成功了的那个时刻，这个小组的用户名一定和我发的put请求里的用户名列表是一样的。但是同时有可能有别的人也在尝试改这个小组的信息，那么我紧接着发一个 get 请求，可能get到的小组里的用户名列表跟我刚才put的已经不一样了。）

如果put请求希望创建一个或多个资源，并且服务端把这资源成功创建了，那么服务端必须（原文大写的MUST）给用户返回一个状态码为 201 (Created) 的响应。而如果这个请求是用来修改某个资源的状态的，那么服务端 必须（MUST）返回一个状态码为 200 (OK) 的响应或者一个状态码为 204 (No Content)的响应。 200 和204 都表示成功完成了这个请求。